
akka.actor.deployment {
  /poller/poller-cloudwatch/metrics-get {
    router = "round-robin-pool"
    nr-of-instances = 100
    pool-dispatcher {
      executor = "thread-pool-executor"
      thread-pool-executor {
        core-pool-size-min = 100
        core-pool-size-max = 100
        core-pool-size-factor = 1.0
      }
    }
  }

  /poller/poller-cloudwatch/metrics-list {
    router = "round-robin-pool"
    nr-of-instances = 2
    pool-dispatcher {
      executor = "thread-pool-executor"
      thread-pool-executor {
        core-pool-size-min = 1
        core-pool-size-max = 2
        core-pool-size-factor = 1.0
      }
    }
  }
}

atlas.akka {
  actors = ${?atlas.akka.actors} [
    {
      name = "poller"
      class = "com.netflix.atlas.poller.PollerManager"
    }
  ]
}

# A pool used for the blocking Redis Cluster processor calls. Important to avoid
# tying up the main Akka thread pool.
redis-io-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 8
  }
  throughput = 16
}

atlas {

  poller {

    // How often to collect data from the pollers.
    frequency = 1 m

    sink = {
      class = "com.netflix.atlas.poller.ClientActor"

      // URL for sending the data
      uri = "http://localhost:7101/api/v1/publish"

      // Maximum number of datapoints to send in a single HTTP request to the publish
      // endpoint.
      batch-size = 10000

      // If set to false, then ClientActor will work in a fire and forget mode with no
      // explicit response message. Setting to true it will send an ack message to indicate
      // it is done processing the message.
      send-ack = false

      // Characters that are allowed in metric names
      valid-tag-characters = "-._A-Za-z0-9"

      // Overrides to be more permissive for the values of some keys
      valid-tag-value-characters = ${?atlas.poller.valid-tag-value-characters} [
        {
          key = "nf.cluster"
          value = "-._A-Za-z0-9^~"
        },
        {
          key = "nf.asg"
          value = "-._A-Za-z0-9^~"
        }
      ]
    }

    pollers = ${?atlas.poller.pollers} [
      {
        class = "com.netflix.atlas.cloudwatch.CloudWatchPoller"
        name = "cloudwatch"
      }
    ]
  }

  redis-cluster {
    # number of keys to scan in each call
    scan.count = 500

    # max size of MGET batch calls
    batch.size = 256
  }

  cloudwatch {

    // Handles routing data points to the proper publish proxy instance for the given stack. Uses the account ID of the
    // Cloud Watch data to map to stacks.
    account.routing {
      queue {
        // The upper limit for each queue to buffer before rejecting data points.
        queueSize = 100000

        // The maximum number of data points to collate into a single flush.
        batchSize = 1000

        // How long to wait for a group of data to reach the batch size or be flushed.
        batchTimeout = 5s

        // How many times to retry a batch if downstream returns a backoff or an exception occurs.
        maxRetries = 1
      }
    }

    // TEMP: Used while testing cloud watch streaming to prepend "TEST." to metrics in order to compare against
    // the poller.
    testMode = true

    // How often to run the publish thread.
    step = 60s

    // How long to wait after the top of the step (usually minute) before starting the scrape.
    publishOffset = 5s

    // Batch size for flushing data back to the poller manager
    batch-size = 1000

    // How long to cache datapoints to avoid gaps
    cache-ttl = 20 minutes

    metrics-get-buffer-size = 10
    metrics-get-max-rate-per-second = 400

    // Class to use for mapping AWS dimensions to a tag map for use in Atlas
    tagger = {
      class = "com.netflix.atlas.cloudwatch.NetflixTagger"

      // Characters that are allowed in metric names
      valid-tag-characters = "-._A-Za-z0-9"

      // Overrides to be more permissive for the values of some keys
      valid-tag-value-characters = ${?atlas.poller.valid-tag-value-characters} [
        {
          key = "nf.cluster"
          value = "-._A-Za-z0-9^~"
        },
        {
          key = "nf.asg"
          value = "-._A-Za-z0-9^~"
        }
      ]

      // Enables extracting a substring of a dimension value using a regex.
      // Only one capture group is supported, so only capture group 1 will
      // be used. If no match is found, the unaltered original value is
      // used.
      extractors = ${?atlas.cloudwatch.tagger.extractors} [
        {
          name = "LoadBalancer"
          directives = [
            {
              pattern = "^app/([^/]+)/.*"
              alias = "aws.alb"
            },
            {
              pattern = "^net/([^/]+)/.*"
              alias = "aws.nlb"
            }
          ]
        },
        {
          name = "TargetGroup"
          directives = [
            {
              pattern = "^targetgroup/([^/]+)/.*"
              alias = "aws.target"
            }
          ]
        }
      ]

      // Allows the dimension names to be mapped to values that are more
      // familiar internally at Netflix. If no explicit mapping is found,
      // then the value from cloudwatch will be used as is.
      mappings = [
        {
          name = "Action"
          alias = "aws.action"
        },
        {
          name = "ActionType"
          alias = "aws.action"
        },
        {
          name = "ActiveInputFailoverLabel"
          alias = "aws.active-input-failover-label"
        },
        {
          name = "ActivityTypeName"
          alias = "id"
        },
        {
          name = "ActivityTypeVersion"
          alias = "aws.version"
        },
        {
          name = "AudioDescriptionName"
          alias = "aws.audio-description"
        },
        {
          name = "AutoScalingGroupName"
          alias = "nf.asg"
        },
        {
          name = "AvailabilityZone"
          alias = "nf.zone"
        },
        {
          name = "BucketName"
          alias = "aws.bucket"
        },
        {
          name = "CacheClusterId"
          alias = "aws.cache"
        },
        {
          name = "CacheNodeId"
          alias = "nf.node"
        },
        {
          name = "ChannelID"
          alias = "aws.channel"
        },
        {
          name = "ClientId"
          alias = "aws.client"
        },
        {
          name = "ClusterIdentifier"
          alias = "aws.redshift"
        },
        {
          name = "ClusterName"
          alias = "aws.memorydb"
        },
        {
          name = "ConnectionId"
          alias = "aws.connection"
        },
        {
          name = "Currency"
          alias = "aws.currency"
        },
        {
          name = "DBClusterIdentifier"
          alias = "aws.dbcluster"
        },
        {
          name = "DbClusterIdentifier"
          alias = "aws.dbcluster"
        },
        {
          name = "DBInstanceIdentifier"
          alias = "aws.dbname"
        },
        {
          name = "Domain"
          alias = "aws.domain"
        },
        {
          name = "DomainName"
          alias = "aws.domain"
        },
        {
          name = "EndpointId"
          alias = "aws.endpoint"
        },
        {
          name = "FileSystemId"
          alias = "aws.efs"
        },
        {
          name = "FilterId"
          alias = "aws.filter"
        },
        {
          name = "FlowARN"
          alias = "aws.flow"
        },
        {
          name = "FunctionName"
          alias = "aws.function"
        },
        {
          name = "HealthCheckId"
          alias = "aws.healthcheck"
        },
        {
          name = "HostedZoneId"
          alias = "aws.hostedZone"
        },
        {
          name = "LinkedAccount"
          alias = "aws.account"
        },
        {
          name = "LoadBalancerName"
          alias = "aws.elb"
        },
        {
          name = "NatGatewayId"
          alias = "aws.gateway"
        },
        {
          name = "NodeID"
          alias = "nf.node"
        },
        {
          name = "Operation"
          alias = "aws.op"
        },
        {
          name = "OutputARN"
          alias = "aws.output"
        },
        {
          name = "OutputGroupName"
          alias = "aws.output-group"
        },
        {
          name = "Pipeline"
          alias = "aws.pipeline"
        },
        {
          name = "Protocol"
          alias = "aws.protocol"
        },
        {
          name = "QueueName"
          alias = "aws.queue"
        },
        {
          name = "Region"
          alias = "aws.region"
        },
        {
          name = "Resource"
          alias = "aws.resource"
        },
        {
          name = "Role"
          alias = "aws.role"
        }
        {
          name = "RuleName"
          alias = "aws.rule"
        },
        {
          name = "ServiceLimit"
          alias = "aws.limit"
        },
        {
          name = "ServiceName"
          alias = "aws.service"
        },
        {
          name = "SourceARN"
          alias = "aws.source"
        },
        {
          name = "StorageType"
          alias = "aws.storage"
        },
        {
          name = "StreamName"
          alias = "aws.stream"
        },
        {
          name = "TableName"
          alias = "aws.table"
        },
        {
          name = "TopicName"
          alias = "aws.topic"
        },
        {
          name = "TransitGateway"
          alias = "aws.tgw"
        },
        {
          name = "TransitGatewayAttachment"
          alias = "aws.tgw-attach"
        },
        {
          name = "TunnelIpAddress"
          alias = "aws.tunnel-ip"
        },
        {
          name = "VpnId"
          alias = "aws.vpn"
        },
        {
          name = "WorkflowTypeName"
          alias = "id"
        },
        {
          name = "WorkflowTypeVersion"
          alias = "aws.version"
        },
      ]

      // Tags that should get applied to all metrics from cloudwatch.
      common-tags = [
        {
          key = "nf.region"
          value = "us-west-2"
        }
      ]

      // When using the netflix mapper, this setting specifies which keys should get
      // processed via frigga to extract tags based on the internal naming conventions.
      netflix-keys = [
        "nf.asg",
        "aws.elb"
      ]
    }

    // Categories to load. The name will be used to load another config block:
    // atlas.cloudwatch.${name}
    //
    // ec2 is excluded by default because at Netflix it tends to add a lot of load in terms of
    // CW calls and offers little value over internal system metrics.
    categories = [
      "alb",
      "alb-zone",
      "alb-tg-zone",
      "api-gateway",
      "billing",
      "dx-connection",
      "dx-connection-light-level",
      "dx-virtual-interface",
      "dynamodb-table-1m",
      "dynamodb-table-5m",
      "dynamodb-table-ops",
      //"ec2",
      "ec2-api",
      "ec2-credit",
      "efs",
      "elasticache",
      "elb",
      "elb-bytes",
      "es",
      "events",
      "iot-base",
      "iot-rule",
      "iot-rule-action",
      "iot-message-broker"
      "kinesis",
      "lambda",
      "lambda-fn-res",
      "mediaconnect-flow",
      "mediaconnect-source",
      "medialive-global",
      "medialive-input",
      "medialive-output",
      "medialive-network",
      "memorydb",
      "nat-gateway",
      "neptune-instance",
      "neptune-cluster-role",
      "neptune-cluster-5m",
      "neptune-cluster-1d",
      "nlb",
      "nlb-zone",
      "nlb-tg-zone",
      "rds",
      "rds-cluster",
      "redshift",
      "route53-healthcheck",
      "route53-hostedzone",
      "route53-resolver",
      "s3",
      "s3-request",
      "sns",
      "sqs",
      "tgw",
      //"trustedadvisor",
      "vpn",
      "workflow",
      "workflow-activity"
    ]

  }
}

include "alb.conf"
include "api-gateway.conf"
include "billing.conf"
include "dx.conf"
include "dynamodb.conf"
include "ec2.conf"
include "elasticache.conf"
include "elb.conf"
include "efs.conf"
include "es.conf"
include "events.conf"
include "iot.conf"
include "kinesis.conf"
include "lambda.conf"
include "mediaconnect.conf"
include "medialive.conf"
include "memorydb.conf"
include "nat-gateway.conf"
include "neptune.conf"
include "nlb.conf"
include "rds.conf"
include "redshift.conf"
include "route53.conf"
include "s3.conf"
include "s3-request.conf"
include "sns.conf"
include "sqs.conf"
include "swf.conf"
include "tgw.conf"
include "trustedadvisor.conf"
include "vpn.conf"
