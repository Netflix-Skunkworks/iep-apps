# A pool used for the blocking Redis Cluster processor calls. Important to avoid
# tying up the main Akka thread pool.
redis-io-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 8
  }
  throughput = 16
}

# A pool used for the AWS poller.
aws-poller-io-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 16
  }
  throughput = 32
}

iep.leader {
  rediscluster {
    # Note: The client app must set the URI to a Redis cluster. For AWS Elastic Cache
    # it may look like:
    #uri = "cluster.deadbeef.clustercfg.usw2.cache.amazonaws.com"

    # Leader election doesn't need many resources.
    connection.pool.max = 1
    connection.port = 7101
    cmd.timeout = 2s
  }

  leaderId = ${netflix.iep.env.instance-id}

  resourceIds = [
    ${netflix.iep.env.cluster}
  ]
}

atlas {

  redis-cluster {
    # number of keys to scan in each call
    scan.count = 500

    # max size of MGET batch calls
    batch.size = 256
  }

  cloudwatch {

    // Handles routing data points to the proper publish proxy instance for the given stack. Uses the account ID of the
    // Cloud Watch data to map to stacks.
    account {
      routing {
        queue {
          // The upper limit for each queue to buffer before rejecting data points.
          queueSize = 100000

          // The maximum number of data points to collate into a single flush.
          batchSize = 1000

          // How long to wait for a group of data to reach the batch size or be flushed.
          batchTimeout = 5s

          // How many times to retry a batch if downstream returns a backoff or an exception occurs.
          maxRetries = 1
        }
      }

      supplier {
        aws {
          // These settings apply to the AWS Config account supplier module. The module queries the AWS Config
          // database for accounts and resources in use in each region.
          // Note that you must have an "netflix.iep.aws.config-query" credentials clause setup with the proper
          // role-arn with permission to make the AWS call.

          // The name of an aggregator instance to use for querying the AWS Config database.
          aggregator = ""

          // The region where the aggregator is located.
          aggregator-region = ""

          // The account under which to query the aggregator.
          config-account = ""

          // A list of regions to fetch resources for. The Config API returns all regions and all accounts but
          // a poller is likely to only handle a subset of regions. Specify those here.
          regions = []

          // Whether or not the accounts list is an allow list that would filter out anything NOT in the list or
          // a deny list that will filter out ONLY those accounts in the list. Note that if this is true and the
          // accounts list is empty, nothing will be returned.
          is-allow = false

          // The list if accounts to filter on.
          accounts = []
        }
      }
    }

    debug {
      dropped {
        tags = false
        age = false
      }
      scrape {
        stale = false
      }
      rules = []
    }

    poller {
      // How often to run the polling scheduler to see if a polling run needs to
      // execute.
      frequency = 1m
    }

    // Whether or not metrics should be pre-pended with TEST.
    testMode = false

    // How many periods to look back from the scrape time for unpublished values.
    grace = 3

    // How often to run the publish thread.
    step = 60s

    // How long to wait after the top of the step (usually minute) before starting the scrape.
    publishOffset = 5s

    // Jedis driver settings.
    redis {
        connection.pool.max = 8
        connection.port = 7101
        cmd.timeout = 2000
    }

    // Batch size for flushing data back to the poller manager
    batch-size = 1000

    // How long to cache datapoints to avoid gaps
    cache-ttl = 20 minutes

    metrics-get-buffer-size = 10
    metrics-get-max-rate-per-second = 400

    // How many entries to keep in the cache. We iterate over the values on each publish to determine
    // the optimal value to write.
    min-cache-entries = 6

    // Class to use for mapping AWS dimensions to a tag map for use in Atlas
    tagger = {
      class = "com.netflix.atlas.cloudwatch.NetflixTagger"

      // Characters that are allowed in metric names
      valid-tag-characters = "-._A-Za-z0-9"

      // Overrides to be more permissive for the values of some keys
      valid-tag-value-characters = ${?atlas.poller.valid-tag-value-characters} [
        {
          key = "nf.cluster"
          value = "-._A-Za-z0-9^~"
        },
        {
          key = "nf.asg"
          value = "-._A-Za-z0-9^~"
        }
      ]

      // Enables extracting a substring of a dimension value using a regex.
      // Only one capture group is supported, so only capture group 1 will
      // be used. If no match is found, the unaltered original value is
      // used.
      extractors = ${?atlas.cloudwatch.tagger.extractors} [
        {
          name = "LoadBalancer"
          directives = [
            {
              pattern = "^app/([^/]+)/.*"
              alias = "aws.alb"
            },
            {
              pattern = "^net/([^/]+)/.*"
              alias = "aws.nlb"
            }
          ]
        },
        {
          name = "TargetGroup"
          directives = [
            {
              pattern = "^targetgroup/([^/]+)/.*"
              alias = "aws.target"
            }
          ]
        },
        {
          # The tag is too long for default Atlas tag values in a number of cases.
          name = "OutputARN"
          directives = [
            {
              pattern = "arn:aws:\\w+:([a-z\\-0-9]+):\\d+:output:\\d-[a-zA-Z0-9]+-[a-zA-Z0-9]+:(.*)"
              alias = "aws.output"
            }
          ]
        },
        {
          # The tag is too long for default Atlas tag values in a number of cases.
          name = "SourceARN"
          directives = [
            {
              pattern = "arn:aws:\\w+:([a-z\\-0-9]+):\\d+:source:\\d-[a-zA-Z0-9]+-[a-zA-Z0-9]+:(.*)"
              alias = "aws.source"
            }
          ]
        },
        {
          # The tag is too long for default Atlas tag values in a number of cases.
          name = "FlowARN"
          directives = [
            {
              pattern = "arn:aws:\\w+:([a-z\\-0-9]+):\\d+:flow:\\d-[a-zA-Z0-9]+-[a-zA-Z0-9]+:(.*)"
              alias = "aws.flow"
            }
          ]
        }
      ]

      // Allows the dimension names to be mapped to values that are more
      // familiar internally at Netflix. If no explicit mapping is found,
      // then the value from cloudwatch will be used as is.
      mappings = [
        {
          name = "Action"
          alias = "aws.action"
        },
        {
          name = "ActionType"
          alias = "aws.action"
        },
        {
          name = "ActiveInputFailoverLabel"
          alias = "aws.active-input-failover-label"
        },
        {
          name = "ActivityTypeName"
          alias = "id"
        },
        {
          name = "ActivityTypeVersion"
          alias = "aws.version"
        },
        {
          name = "AudioDescriptionName"
          alias = "aws.audio-description"
        },
        {
          name = "AutoScalingGroupName"
          alias = "nf.asg"
        },
        {
          name = "AvailabilityZone"
          alias = "nf.zone"
        },
        {
          name = "BucketName"
          alias = "aws.bucket"
        },
        {
          name = "CacheClusterId"
          alias = "aws.cache"
        },
        {
          name = "CacheNodeId"
          alias = "nf.node"
        },
        {
          name = "ChannelID"
          alias = "aws.channel"
        },
        {
          name = "ChannelId"
          alias = "aws.channel"
        },
        {
          name = "ClientId"
          alias = "aws.client"
        },
        {
          name = "ClusterIdentifier"
          alias = "aws.redshift"
        },
        {
          name = "ClusterName"
          alias = "aws.memorydb"
        },
        {
          name = "ConnectionId"
          alias = "aws.connection"
        },
        {
          name = "Currency"
          alias = "aws.currency"
        },
        {
          name = "DBClusterIdentifier"
          alias = "aws.dbcluster"
        },
        {
          name = "DBInstanceIdentifier"
          alias = "aws.dbname"
        },
        {
          name = "DeliveryStreamName"
          alias = "aws.deliveryStream"
        },
        {
          name = "DestinationBucket"
          alias = "aws.destinationBucket"
        },
        {
          name = "Domain"
          alias = "aws.domain"
        },
        {
          name = "DomainName"
          alias = "aws.domain"
        },
        {
          name = "EndpointId"
          alias = "aws.endpoint"
        },
        {
          name = "FileSystemId"
          alias = "aws.efs"
        },
        {
          name = "FilterId"
          alias = "aws.filter"
        },
        {
          name = "FunctionName"
          alias = "aws.function"
        },
        {
          name = "HealthCheckId"
          alias = "aws.healthcheck"
        },
        {
          name = "HostedZoneId"
          alias = "aws.hostedZone"
        },
        {
          name = "InstanceId"
          alias = "nf.node"
        },
        {
          name = "LinkedAccount"
          alias = "aws.account"
        },
        {
          name = "LoadBalancerName"
          alias = "aws.elb"
        },
        {
          name = "MetricStreamName"
          alias = "aws.stream"
        },
        {
          name = "NatGatewayId"
          alias = "aws.gateway"
        },
        {
          name = "NodeID"
          alias = "nf.node"
        },
        {
          name = "NodeName"
          alias = "nf.node"
        },
        {
          name = "Operation"
          alias = "aws.op"
        },
        {
          name = "OutputGroupName"
          alias = "aws.output-group"
        },
        {
          name = "Per-VPC Metrics"
          alias = "aws.vpc"
        },
        {
          name = "Pipeline"
          alias = "aws.pipeline"
        },
        {
          name = "Protocol"
          alias = "aws.protocol"
        },
        {
          name = "QueueName"
          alias = "aws.queue"
        },
        {
          name = "Region"
          alias = "aws.region"
        },
        {
          name = "Resource"
          alias = "aws.resource"
        },
        {
          name = "Role"
          alias = "aws.role"
        },
        {
          name = "RuleId"
          alias = "aws.rule"
        },
        {
          name = "RuleName"
          alias = "aws.rule"
        },
        {
          name = "ServiceLimit"
          alias = "aws.limit"
        },
        {
          name = "ServiceName"
          alias = "aws.service"
        },
        {
          name = "SourceBucket",
          alias = "aws.sourceBucket"
        },
        {
          name = "StorageType"
          alias = "aws.storage"
        },
        {
          name = "StreamName"
          alias = "aws.stream"
        },
        {
          name = "TableName"
          alias = "aws.table"
        },
        {
          name = "TopicName"
          alias = "aws.topic"
        },
        {
          name = "TransitGateway"
          alias = "aws.tgw"
        },
        {
          name = "TransitGatewayAttachment"
          alias = "aws.tgw-attach"
        },
        {
          name = "TunnelIpAddress"
          alias = "aws.tunnel-ip"
        },
        {
          name = "VpnId"
          alias = "aws.vpn"
        },
        {
          name = "VolumeId"
          alias = "aws.volume"
        },
        {
          name = "WorkflowTypeName"
          alias = "id"
        },
        {
          name = "WorkflowTypeVersion"
          alias = "aws.version"
        },
      ]

      // Tags that should get applied to all metrics from cloudwatch.
      common-tags = [
      ]

      // When using the netflix mapper, this setting specifies which keys should get
      // processed via frigga to extract tags based on the internal naming conventions.
      netflix-keys = [
        "nf.asg",
        "aws.elb"
      ]
    }

    // Categories to load. The name will be used to load another config block:
    // atlas.cloudwatch.${name}
    //
    // ec2 is excluded by default because at Netflix it tends to add a lot of load in terms of
    // CW calls and offers little value over internal system metrics.
    categories = [
      "alb-lcus",
      "alb-zone",
      "alb-tg-zone",
      "api-gateway",
      "billing",
      "cloudhsm",
      "cw-metric-streams",
      "dx-connection",
      "dx-connection-light-level",
      "dx-virtual-interface",
      "dynamodb-table-1m",
      "dynamodb-table-5m",
      "dynamodb-table-ops",
      "dynamodb-capacity",
      "ec2",
      "ec2-api",
      "ec2-credit",
      "ec2-ebs",
      "ec2-imdsv2",
      "ec2-nau",
      "efs",
      "elasticache",
      "elb",
      "elb-bytes",
      "es",
      "events",
      "firehose",
      "fsx-volume",
      "iot-base",
      "iot-rule",
      "iot-rule-action",
      "iot-message-broker"
      "kinesis",
      "lambda",
      "lambda-fn-res",
      "mediaconnect-flow",
      "mediaconnect-output",
      "mediaconnect-source",
      "medialive-audio",
      "medialive-global",
      "medialive-input",
      "medialive-output",
      "medialive-network",
      "memorydb",
      "nat-gateway",
      "neptune-cluster-role",
      "neptune-cluster-5m",
      "neptune-cluster-1d",
      "nlb",
      "nlb-zone",
      "nlb-tg-zone",
      "opensearch",
      "rds",
      "rds-cluster",
      "rds-cpu",
      "redshift",
      "route53-healthcheck",
      "route53-hostedzone",
      "route53-resolver-inbound",
      "route53-resolver-outbound",
      "s3",
      "s3-replication",
      "s3-request",
      "sns",
      "sqs",
      "sqs-msg-size",
      "tgw",
      //"trustedadvisor",
      "vpn",
      "workflow",
      "workflow-activity"
    ]

  }
}

include "alb.conf"
include "api-gateway.conf"
include "billing.conf"
include "cloudhsm.conf"
include "cloudwatch.conf"
include "dx.conf"
include "dynamodb.conf"
include "ec2.conf"
include "elasticache.conf"
include "elb.conf"
include "efs.conf"
include "es.conf"
include "events.conf"
include "firehose.conf"
include "fsx.conf"
include "iot.conf"
include "kinesis.conf"
include "lambda.conf"
include "mediaconnect.conf"
include "medialive.conf"
include "memorydb.conf"
include "nat-gateway.conf"
include "neptune.conf"
include "nlb.conf"
include "opensearch.conf"
include "rds.conf"
include "redshift.conf"
include "route53.conf"
include "s3.conf"
include "s3-replication.conf"
include "s3-request.conf"
include "sns.conf"
include "sqs.conf"
include "swf.conf"
include "tgw.conf"
include "trustedadvisor.conf"
include "vpn.conf"
