
atlas {
  cloudwatch {
    // https://docs.aws.amazon.com/neptune/latest/userguide/cw-metrics.html
    neptune-cluster-role = {
      namespace = "AWS/Neptune"
      period = 1m
      end-period-offset = 3
      timeout = 15m

      dimensions = [
        "DBInstanceIdentifier"
      ]

      metrics = [
        {
          name = "BufferCacheHitRatio"
          alias = "aws.neptune.bufferCacheHitRatio"
          conversion = "max"
        },
        {
          name = "ClusterReplicaLag"
          alias = "aws.neptune.replicaLag"
          conversion = "max"
        },
        {
          name = "ClusterReplicaLagMaximum"
          alias = "aws.neptune.replicaLagMax"
          conversion = "max"
        },
        {
          name = "ClusterReplicaLagMinimum"
          alias = "aws.neptune.replicaLagMin"
          conversion = "min"
        },
        {
          name = "CPUUtilization"
          alias = "aws.neptune.cpuUtilization"
          conversion = "max"
        },
        {
          name = "EngineUptime"
          alias = "aws.neptune.engineUptime"
          conversion = "max"
        },
        {
          name = "FreeableMemory"
          alias = "aws.neptune.freeableMemoryBytes"
          conversion = "min"
        },
        {
          name = "GremlinRequestsPerSec"
          alias = "aws.neptune.requests"
          conversion = "sum,rate"
          tags = [
            {
              key = "engine"
              value = "gremlin"
            }
          ]
        },
        {
          name = "GremlinWebSocketOpenConnections"
          alias = "aws.neptune.webSocketConnections"
          conversion = "max"
          tags = [
            {
              key = "engine"
              value = "gremlin"
            }
          ]
        },
        {
          name = "LoaderRequestsPerSec"
          alias = "aws.neptune.loaderRequests"
          conversion = "sum,rate"
        },
        {
          name = "MainRequestQueuePendingRequests"
          alias = "aws.neptune.pendingRequests"
          conversion = "max"
        },
        {
          name = "NCUUtilization",
          alias = "aws.neptune.ncuUtilization"
          conversion = "max"
        },
        {
          name = "NetworkReceiveThroughput"
          alias = "aws.neptune.networkThroughput"
          conversion = "sum,rate"
          tags = [
            {
              key = "id"
              value = "in"
            }
          ]
        },
        {
          name = "NetworkTransmitThroughput"
          alias = "aws.neptune.networkThroughput"
          conversion = "sum,rate"
          tags = [
            {
              key = "id"
              value = "out"
            }
          ]
        },
        {
          name = "NumTxCommitted"
          alias = "aws.neptune.transactions"
          conversion = "sum,rate"
          tags = [
            {
              key = "id"
              value = "committed"
            }
          ]
        },
        {
          name = "NumTxOpened"
          alias = "aws.neptune.transactions"
          conversion = "sum,rate"
          tags = [
            {
              key = "id"
              value = "opened"
            }
          ]
        },
        {
          name = "NumTxRolledBack"
          alias = "aws.neptune.transactions"
          conversion = "sum,rate"
          tags = [
            {
              key = "id"
              value = "rolledback"
            }
          ]
        },
        {
          name = "OpenCypherRequestsPerSec",
          alias = "aws.neptune.openCypher.requests"
          conversion = "sum,rate"
        },
        {
          name = "OpenCypherBoltOpenConnections"
          alias = "aws.neptune.openCypher.boltConnections"
          conversion = "max"
        },
        {
          name = "ServerlessDatabaseCapacity"
          alias = "aws.neptune.serverless.capacity"
          conversion = "max"
        },
        {
          name = "SparqlRequestsPerSec"
          alias = "aws.neptune.requests"
          conversion = "sum,rate"
          tags = [
            {
              key = "engine"
              value = "sparql"
            }
          ]
        },
        {
          name = "StatsNumStatementsScanned"
          alias = "aws.neptune.statementsScanned"
          conversion = "max,rate"
          monotonic = true
        },
        {
          name = "TotalRequestsPerSec"
          alias = "aws.neptune.requests"
          conversion = "sum,rate"
        },
        {
          name = "TotalClientErrorsPerSec"
          alias = "aws.neptune.errors"
          conversion = "sum,rate"
          tags = [
            {
              key = "id"
              value = "Client"
            }
          ]
        },
        {
          name = "TotalServerErrorsPerSec"
          alias = "aws.neptune.errors"
          conversion = "sum,rate"
          tags = [
            {
              key = "id"
              value = "server"
            }
          ]
        },
        {
          name = "UndoLogListSize"
          alias = "aws.neptune.undoLogListSize"
          conversion = "max"
        }
      ]
    }

    # Metrics published at cluster level, every 5 minutes
    neptune-cluster-5m = {
      namespace = "AWS/Neptune"
      period = 5m
      end-period-offset = 9
      timeout = 15m

      dimensions = [
        "DBClusterIdentifier"
      ]

      metrics = [
        {
          name = "VolumeBytesUsed"
          alias = "aws.neptune.volumeBytesUsed"
          conversion = "max"
        },
        {
          name = "VolumeReadIOPs"
          alias = "aws.neptune.iops"
          conversion = "sum,rate"
          tags = [
            {
              key = "id"
              value = "read"
            }
          ]
        },
        {
          name = "VolumeWriteIOPs"
          alias = "aws.neptune.iops"
          conversion = "sum,rate"
          tags = [
            {
              key = "id"
              value = "write"
            }
          ]
        }
      ]
    }

    # Metrics published at cluster level, once per day
    neptune-cluster-1d = {
      namespace = "AWS/Neptune"
      period = 1d
      end-period-offset = 3
      poll-offset = 4h

      dimensions = [
        "DBClusterIdentifier"
      ]

      metrics = [
        {
          name = "BackupRetentionPeriodStorageUsed"
          alias = "aws.neptune.backupStorageUsed"
          conversion = "max"
        },
        {
          name = "SnapshotStorageUsed"
          alias = "aws.neptune.snapshotStorageUsed"
          conversion = "max"
        },
        {
          name = "TotalBackupStorageBilled"
          alias = "aws.neptune.totalBackupStorageBytes"
          conversion = "max"
        }
      ]
    }
  }
}
