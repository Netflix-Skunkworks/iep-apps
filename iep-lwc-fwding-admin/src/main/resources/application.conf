
atlas.akka {
  api-endpoints = [
    "com.netflix.atlas.akka.ConfigApi",
    "com.netflix.atlas.akka.HealthcheckApi",
    "com.netflix.iep.lwc.fwd.admin.Api"
  ]

  actors = ${?atlas.akka.actors} [
    {
      name = "scalingPolicies"
      class = "com.netflix.iep.lwc.fwd.admin.ScalingPolicies"
    }
  ]

}

blocking-dispatcher {
  executor = "thread-pool-executor"
  thread-pool-executor {
    core-pool-size-min = 10
    core-pool-size-max = 10
  }
}

iep.lwc.fwding-admin {
  age-limit = 10m
  queue-size-limit = 10000
  edda-cache-refresh-interval = 30m
  fwd-metric-info-purge-limit = 5d
  cw-expr-uri = "http://localhost:7102/api/v2/cloudwatch-forwarding/clusters/%s"
  user = user123
  accountEnvMapping = {
    123 = local
  }

  // The host name in the properties 'cw-alarms-uri', 'ec2-policies-uri' and 'titus-policies-uri'
  // uses the following pattern to lookup the appropriate Edda deployment.
  // "prefix-%s.%s.%s.suffix".format(account, region, env)
  cw-alarms-uri = "http://localhost:7103/api/v2/aws/alarms;namespace=NFLX/EPIC;_expand:(alarmName,metricName,dimensions:(name,value))"
  ec2-policies-uri = "http://localhost:7103/api/v2/aws/scalingPolicies;_expand:(policyName,alarms:(alarmName))"
  titus-policies-uri = "http://localhost:7103/api/v3/netflix/titusscalingPolicies;_expand:(jobId,id,scalingPolicy:(targetPolicyDescriptor:(customizedMetricSpecification)))"
}
